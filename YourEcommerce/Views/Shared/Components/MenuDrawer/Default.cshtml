@using YourEcommerce.ViewModels
@using YourEcommerce.Helpers
@model YourEcommerce.ViewModels.MenuDrawerViewModel

<div id="drawer-backdrop" class="flex flex-col fixed top-0 left-0 z-250 h-screen overflow-y-auto transition-transform -translate-x-full bg-white w-64 dark:bg-neutral-800" tabindex="-1" aria-labelledby="drawer-backdrop-label">
    <div class="flex items-center justify-between p-4 border-b border-l border-neutral-300">
        <h5 id="drawer-backdrop-label" class="text-lg font-semibold text-black uppercase dark:text-neutral-400">Menu</h5>
        <button type="button" data-drawer-hide="drawer-backdrop" aria-controls="drawer-backdrop" class="cursor-pointer text-black bg-transparent hover:bg-neutral-200 hover:text-neutral-900 rounded-lg dark:hover:bg-neutral-600 dark:hover:text-white" >
        <span class="sr-only">Close menu</span>
        <i data-lucide="x" class="size-7"></i>
    </button>
    </div>
  <div class="p-4 overflow-y-auto">
      <ul class="space-y-4">
            @foreach (var genderGroup in Model.MenuStructure.OrderBy(g => g.Key.Id))
            {
                var gender = genderGroup.Key;
                var categories = genderGroup.Value;
                <div>
                    <button id="btn-gender-@gender.Id" type="button" class="cursor-pointer w-full flex gap-2 items-center text-left text-black font-semibold py-2 px-3 text-lg" onclick="toggleGender(@gender.Id)">
                        @gender.Name
                        <i id="icon-gender-@gender.Id" data-lucide="chevron-down" class="size-5 transition-transform"></i>
                    </button>
                    <div id="gender-@gender.Id" class="hidden pl-4 space-y-2 mb-6">
                        @foreach (var category in categories)
                        {
                            var categoryName = category.Key;
                            var categorySafe = categoryName.Replace(" ", "-").ToLowerInvariant();
                            var tags = category.Value;
                            <div>
                                <button id="btn-category-@gender.Id-@categorySafe" type="button" class="cursor-pointer w-full flex gap-2 items-center text-left text-neutral-500 hover:text-black font-medium py-1 px-2 text-base" onclick="toggleCategory(@gender.Id, '@categorySafe')">
                                    @categoryName
                                    <i id="icon-category-@gender.Id-@categorySafe" data-lucide="chevron-down" class="size-5 transition-transform"></i>
                                </button>
                                <ul id="product-category-@gender.Id-@categorySafe" class="hidden pl-5 font-medium mb-6">
                                    @foreach (var tagName in tags)
                                    {
                                        <li>
                                            <a href="#" class="block py-2 text-neutral-500 hover:text-black dark:hover:text-white">@tagName</a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            }
      </ul>
   </div>
</div>

<script>
    function toggleGender(id) {
        const content = document.getElementById(`gender-${id}`);
        const icon = document.getElementById(`icon-gender-${id}`);
        const button = document.getElementById(`btn-gender-${id}`);
        const isHidden = content.classList.contains('hidden');

        document.querySelectorAll('[id^="gender-"]').forEach(el => el.classList.add('hidden'));
        document.querySelectorAll('[id^="icon-gender-"]').forEach(i => i.setAttribute('data-lucide', 'chevron-down'));
        document.querySelectorAll('[id^="btn-gender-"]').forEach(b => {
            b.classList.remove('text-black');
            b.classList.add('text-neutral-500');
        });

        if (isHidden) {
            content.classList.remove('hidden');
            icon.setAttribute('data-lucide', 'chevron-up');
            button.classList.remove('text-neutral-500');
            button.classList.add('text-black');
        }

        lucide.createIcons();
    }

    function toggleCategory(id, categoryName) {
        const content = document.getElementById(`product-category-${id}-${categoryName}`);
        const icon = document.getElementById(`icon-category-${id}-${categoryName}`);
        const button = document.getElementById(`btn-category-${id}-${categoryName}`);
        const isHidden = content.classList.contains('hidden');

        document.querySelectorAll('[id^="product-category-"]').forEach(el => el.classList.add('hidden'));
        document.querySelectorAll('[id^="icon-category-"]').forEach(i => i.setAttribute('data-lucide', 'chevron-down'));
        document.querySelectorAll('[id^="btn-category-"]').forEach(b => {
            b.classList.remove('text-black');
            b.classList.add('text-neutral-500');
        });

        if (isHidden) {
            content.classList.remove('hidden');
            icon.setAttribute('data-lucide', 'chevron-up');
            button.classList.remove('text-neutral-500');
            button.classList.add('text-black');
        }

        lucide.createIcons();
    }
</script>